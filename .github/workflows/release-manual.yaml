---
name: "Manual Release"

concurrency:
  group: container-release
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      apps:
        description: "Apps (ex: radarr,sonarr)"
        default: "ALL"
        required: true
      channels:
        description: "Channels (ex: main,develop)"
        default: "stable"
        required: true
      push:
        description: "Push"
        default: "false"
        required: true

env:
  TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  generate-build-matrix:
    name: Generate matrix for building images
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.determine-images.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - name: Install tools
        run: sudo apt-get install moreutils jo

      # - name: Determine images to build
      #   id: determine-images
      #   shell: bash
      #   run: |
      #     if [ "${{ inputs.app }}" = "ALL" ]; then
      #       ./.github/scripts/fetch.sh all
      #     else
      #       output="[]"
      #       IFS=',' read -a channels <<< "${{ inputs.channels }}"
      #       declare -a images_array=()
      #       for channel in "${channels[@]}"; do
      #         image="$(jo app="${{ inputs.app }}" channel="$channel")"
      #         images_array+=($image)
      #       done

      #       output="$(jo -a ${images_array[*]})"
      #       echo "changes=${output}" >> $GITHUB_OUTPUT
      #     fi

      - name: Fetch new app versions
        id: determine-images
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975 # v6.4.0
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const fetchAction = await import('${{ github.workspace }}/.github/scripts/index.mjs');
            let apps = core.getInput['apps']
              .split(',')
              .filter(Boolean);
            let channels = core.getInput['channels']
              .split(',')
              .filter(Boolean)
              .map(e => ({ "name": e, "stable": true }));
            
            if (apps == 'ALL') {
              fetchAction.changes(glob, context, github, core, all: true);
            } else {
              fetchAction.appChanges(core, apps, channels);
            }

  images-build:
    uses: mmalyska/containers/.github/workflows/action-image-build.yaml@main
    if: needs.generate-build-matrix.outputs.matrix != '[]'
    needs: ["generate-build-matrix"]
    with:
      imagesToBuild: "${{ needs.generate-build-matrix.outputs.matrix }}"
      pushImages: "${{ github.event.inputs.push }}"
      updateMetadata: "${{ github.event.inputs.push }}"
    secrets: inherit
